h1. Cruddler - CRUD admin controllers for lazy programmers

NOTE: This is currently in in-house-testing-and-developing state. Feel free to use, but don't complain if it doesn't fit your needs. Feedback is welcome, though.

h2. Mission Objective

I was sick of implementing edit, show, index, ... actions over and over again, and wasn't too enthusiastic about resource_controller and the like for they are way to overengineered.

The same annoyance I found in implementing the corresponding view.

And now, Rails 3.1 is there with view inheritance.

h2. Installaton

add to your Gemfile:

<pre>
  gem 'cruddler', git: 'https://github.com/provideal/cruddler'
</pre>

and install the view-inheritance views:

<pre>
  rails g cruddler:install
</pre>

This installs the index, show, new, edit files to <tt>app/views/admin/application/</tt>, if you want to use them elsewhere, just move them around as you like :)

It also installs a <tt>cruddler.yml</tt> locale file as described below in i18n.

h2. Controller

just write

<pre>
  cruddler :all
</pre>

into your controller, or replace <tt>:all</tt> with a list of the actions you want to generate.

h3. Options

* <tt>:klass =&gt; </tt> the resource class, if it can't be guessed from the controller name
* <tt>:parameter_name =&gt; </tt> the name of the <tt>params</tt> entry, also used as the name of the instance variable generated
* <tt>:nested =&gt; </tt> if the current resource is nested, either give the name of the nesting model, an array of the names of nesting models, or a hash <tt>{:model1 => Model1, :model2 => Model2, ...}</tt> if the name/model connection can't be guessed.
* <tt>:nested_as =&gt; </tt> the name of the current resource inside the nesting model, if it can't be guessed. Usually necessary for polymorphic nestings
* <tt>:path_components =&gt; </tt> an array of path components like <tt>[:admin, :catalog]</tt> if they can't be guessed from the controller name
* <tt>:authorize =&gt; </tt> <tt>true</tt> if <a href="https://github.com/ryanb/cancan">cancan</a> <tt>authorize!</tt> is to be called for the current resource
* <tt>:index_path =&gt; </tt> either a string, a symbol (<tt>:index, :show, :edit, :new</tt>) or a <tt>proc</tt> to declare the <tt>index</tt> path for redirects
* <tt>:after_update_path =&gt; </tt> either a string, a symbol (<tt>:index, :show, :edit, :new</tt>) or a <tt>proc</tt> to declare where to redirect after updates
* <tt>:after_create_path =&gt; </tt> either a string, a symbol (<tt>:index, :show, :edit, :new</tt>) or a <tt>proc</tt> to declare where to redirect after create
* <tt>:after_destroy_path =&gt; </tt> either a string, a symbol (<tt>:index, :show, :edit, :new</tt>) or a <tt>proc</tt> to declare where to redirect after destroy
* <tt>:stateful_index =&gt; </tt> if tabulatr is available, the <tt>find_for_table</tt> call geht the <tt>:stateful =&gt; session</tt> option.

We intentionally don't offer any callbacks or the like, for typical CRUD actions are sufficiently simple to just implement them if they are non-standard. So -- It you're not happy with what cruddler generated, just implement your action 'by hand'.

BTW: If <a href="http://github.com/provideal/tabulatr">tabulatr</a> is available, the generated <tt>index</tt> action uses <tt>find_for_table</tt> instead of <tt>find</tt>.

h3. Strong Parameters

To use strong parameters in rails 4, you have the following options:

Give block to generate house_parameters method

<pre>
  class HousesController < ApplicationController
    cruddler :all do
      params.required(:house).permit(:name, :number)
    end
  end
</pre>

Give <tt>permit_params</tt> option to implicitly define <tt>cat_params</tt> method:

<tt>params.required(:cat).permit(:name)</tt>

<pre>
  class CatsController < ApplicationController
    cruddler :all,
      nested: 'house',
      index_path: ->(){ house_cats_path(@house) },
      permit_params: [:name]
  end
</pre>

Give <tt>permit_params: :all</tt> option to implicitly define <tt>cat_params</tt> method:

<tt>params.required(:parasite).permit!</tt>

<pre>
  class ParasitesController < ApplicationController
    cruddler :all,
      nested: ['house', 'cat'],
      index_path: ->(){ house_cat_parasites_path(@house, @cat) },
      permit_params: :all
  end
</pre>

Give <tt>permit_params: ->(){ closure }</tt> option to implicitly define dynamic <tt>cat_params</tt> method:

<tt>params.required(:dog).permit(&lt;evaluation of closure&gt;)</tt>

<pre>
  class DogsController < ApplicationController
    cruddler :all,
      nested: 'house',
      nested_as: 'ref',
      permit_params: ->(){ @house.id == 2 ? :name : [] }
  end
</pre>

h3. Dealing with non-standard queries

In the standard case, cruddler uses the plain <tt>FooBar</tt> model in the <tt>FooBarController</tt>.
If you want to change this behavior, override <tt>cruddler_find_on</tt> in your controller.
The example below uses the unscoped model:

<pre>
def cruddler_find_on
  FooBar.unscoped
end
</pre>

h2. Views

Just implement <tt>_model_name</tt>, and <tt>_listing</tt> partials, the rest is done magically. If your edit or new actions need to be more specific, you can override with <tt>_edit_model_name</tt> or <tt>_new_model_name</tt>.

As with the controllers, we don't offer fancy customization options. If you don't like the views, go to the cruddler gem, copy the views into your project, and customize them to your needs.

h2. I18n

In the views and flash-messages, we use i18n, here's an example, you get the idea:

<pre>
  en:
    cruddler:
      abort: "Abort"
      admin: # path elements if necessary
        product:
          edit: "Edit product '%{name}'"
          index: "All our Products"
          create: "Create new Product"
          new: "Create new Product"
          update_success: "Product updated"
          update_problem: "Product can't be saved"
          create_success: "Product created"
          create_problem: "Product can't be created"
</pre>

h3. Bugs

There may be lots of bugs in cruddler, although we do some testing (see <tt>spec/</tt>). So if you hunt them, please let me know using the <a href="https://github.com/provideal/cruddler/issues">GitHub Bugtracker</a>.

h2. Contributing to cruddler

* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the <a href="https://github.com/provideal/cruddler/issues">issue tracker</a> to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.
* Feel free to send a pull request if you think others (me, for example) would like to have your change incorporated into future versions of cruddler.

h2. License

Copyright (c) 2010-2012 Peter Horn, <a href="http://www.provideal.net" target="_blank">Provideal GmbH</a>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
